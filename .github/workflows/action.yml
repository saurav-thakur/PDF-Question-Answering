name: PDF Question Answering Github Actions

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - README.md
  push:
    branches: ["main"]
    paths-ignore:
      - README.md

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-ecr-image:
    name: Continuous-Integration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    env:
      POSTGRESQL_URL_DATABASE: ${{secrets.POSTGRESQL_URL_DATABASE}}
      HOST: ${{secrets.HOST}}
      PINECONE_API_KEY: ${{secrets.PINECONE_API_KEY}}
      GROQ_API_KEY: ${{secrets.GROQ_API_KEY}}
      PINECONE_CLOUD: ${{secrets.PINECONE_CLOUD}}
      PINECONE_REGION: ${{secrets.PINECONE_REGION}}
      PINECONE_INDEX_NAME: ${{secrets.PINECONE_INDEX_NAME}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
      ECR_REPO: ${{secrets.ECR_REPO}}
      DOCKER_BUILDKIT: 1 # Enable BuildKit for more efficient builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1 # Shallow clone

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.2"

      - name: Clean up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ${{secrets.ECR_REPO}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Add .dockerignore if not exists
          if [ ! -f .dockerignore ]; then
            echo "**/.git" > .dockerignore
            echo "**/node_modules" >> .dockerignore
            echo "**/.env" >> .dockerignore
          fi

          # Build with BuildKit cache mounting
          docker build \
            --no-cache \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Clean up local images after push
          docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Clean up disk space
        run: |
          docker system prune -af --volumes
          docker image prune -af
          sudo rm -rf /tmp/*
          sudo apt-get clean

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Shallow clone

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest Docker image
        run: |
          # Remove old images before pulling new one
          docker image prune -af
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest

      - name: Stop and remove existing container
        run: |
          docker stop $(docker ps -q --filter ancestor=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}) || true
          docker rm $(docker ps -aq --filter ancestor=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}) || true

      - name: Run Docker Image to Serve Users
        run: |
          docker run -d \
            --restart unless-stopped \
            -e PINECONE_API_KEY="${{secrets.PINECONE_API_KEY}}" \
            -e GROQ_API_KEY="${{secrets.GROQ_API_KEY}}" \
            -e PINECONE_CLOUD="${{secrets.PINECONE_CLOUD}}" \
            -e PINECONE_REGION="${{secrets.PINECONE_REGION}}" \
            -e PINECONE_INDEX_NAME="${{secrets.PINECONE_INDEX_NAME}}" \
            -e POSTGRESQL_URL_DATABASE="${{secrets.POSTGRESQL_URL_DATABASE}}" \
            -e HOST="${{secrets.HOST}}" \
            -e AWS_ACCESS_KEY_ID="${{secrets.AWS_ACCESS_KEY_ID}}" \
            -e AWS_SECRET_ACCESS_KEY="${{secrets.AWS_SECRET_ACCESS_KEY}}" \
            -e AWS_DEFAULT_REGION="${{secrets.AWS_DEFAULT_REGION}}" \
            -e ECR_REPO="${{secrets.ECR_REPO}}" \
            -p 8000:8000 \
            "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest"
